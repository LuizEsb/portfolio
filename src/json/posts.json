[
    {
        "id": 1,
        "titulo": "Organo: gest√£o de equipes",
        "texto": "# Organo\n\nA Organo √© uma aplica√ß√£o de gest√£o de equipes que permite registrar colaboradores e organiz√°-los por times. Cada time possui um estilo caracter√≠stico, customiz√°vel dinamicamente atrav√©s de props e eleva√ß√£o de depend√™ncias dos componentes.\n\n## Teste a vers√£o completa [aqui](https://organo-three-green.vercel.app/)\n\n## Cards dos Times\n√â poss√≠vel favoritar os colaboradores ou remov√™-los do time clickando no X acima dele.\n\n![Design card times](https://i.imgur.com/lqMudnj.png)\n\nVoc√™ tamb√©m pode alterar as cores dos times em tempo real! E tudo isso s√≥ √© poss√≠vel, de maneira simples, gra√ßas ao virtual DOM e aos estados do React!\n\n![Mudando cor card times](https://i.imgur.com/mlwOGBe.png)\n\nOs times s√£o removidos automaticamente quando n√£o houverem mais colaboradores os compondo.\n\n## P√°gina inicial\n\n![Tela inicial organo](https://i.imgur.com/xtW2lnu.png)\n\n## Tela de cadastro\nA aplica√ß√£o conta com dois formul√°rios. Um de cadastro de colaboradores, com nome, cargo, url da imagem do colaborador e time a que pertence. J√° o de cadastro de times conta com um campo para o nome do time e uma sele√ß√£o da cor caracter√≠stica do time.\n\n![Formul√°rio de cadastro de colaborador](https://i.imgur.com/tlO6g5v.png)\n\n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/Organo)\n## Como rodar o projeto:\n\nCertifique-se de que voc√™ tenha o Node e o json-server instalado,\n\nAbra a pasta do projeto na sua IDE,\n\nRode o projeto localmente com este comando no terminal:\n\n```bash\nnpm start\n```\nO projeto deve abrir automaticamente no seu navegador padr√£o.\n\nCaso n√£o abra, com Ctrl + clique acesse o link que o terminal exibir (algo parecido com \"http://localhost:3000\")\n\n### Ferramentas utilizadas:\n\n* React.js\n* Node.js\n* HTML\n* CSS\n* Vite\n* Bibliotecas como react-icons e hex-to-rgba\n\n> Desenvolvido durante meus estudos, o projeto me permitiu aprofundar os conhecimentos sobre React.js, componentes e o uso de seus Hooks.\n\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luiz-felipe-esboldrim-9942a0345/)" 

    },
    {
        "id": 2,
        "titulo": "ERP em Delphi + Firebird",
        "texto": "# ERP em Delphi + Firebird\n\nFiz este projeto durante meu per√≠odo de Desenvolvedor Delphi Trainee, me auxiliou n√£o s√≥ a compreender o funcionamento de bancos de dados e como manipul√°-los, como tamb√©m a aplicar algumas pr√°ticas de c√≥digo limpo. Cont√©m um sistema comercial modular que facilita a manuten√ß√£o e escalabilidade com foco na seguran√ßa dos dados.\n\n![Design da tela de clientes ERP-Delphi](https://i.imgur.com/g9NB4FK.png)\n\n## üõ†Ô∏èFuncionalidades\n\n* Login com criptografia de senha SHA-256\n\n* Cadastro de Clientes e Produtos\n\n* Pesquisa e filtragem de Clientes por ID ou Nome (Login) \n\n* Controle de estoque (em desenvolvimento)\n\n* Interface por Cards com navega√ß√£o embutida (formul√°rios carregados em pain√©is)\n\n* Layout responsivo com organiza√ß√£o por painel lateral fixo e conte√∫do din√¢mico\n\n* Expira√ß√£o de sess√£o com timer\n\n## ‚úîÔ∏èTecnologias utilizadas:\n\n* Delphi 11\n* Firebird 2.5.9\n* FireDAC\n\n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/ERP-Delphi)\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luizesb)" 

    },
    {
        "id": 3,
        "titulo": "CodeConnect: rede social",
        "texto": "# CodeConnect\n\nDurante meus estudos sobre React (componentes, Hooks e JSX), desenvolvi este projeto de uma rede social fict√≠cia para pessoas desenvolvedoras chamada CodeConnect.\n\n![imagem tela de login codeConnect](https://i.imgur.com/9pkuf9E.png)\n\n## Teste o projeto [aqui](https://code-connect-nine-rose.vercel.app/)\n\n## Confira a p√°gina de feed [aqui](https://github.com/LuizEsb/CodeConnect-feed)\n\n## üî® Funcionalidades do projeto\n\n P√°gina de login da CodeConnect, contendo uma imagem, um formul√°rio de e-mail e senha com t√≠tulos e textos, um bot√£o para entrar na aplica√ß√£o, links para lembrar senha ou cadastrar. \n Ap√≥s o login (API de usu√°rios n√£o implementada), o usu√°rio tem acesso √† p√°gina de upload de imagens da rede social. \n Na p√°gina de uploads o usu√°rio pode carregar uma imagem e ter um preview da mesma clicando no bot√£o \"Carregar imagem\" ou no \"Publicar\" do menu lateral.\n Ao clicar no bot√£o \"Sair\", o usu√°rio √© redirecionado para a p√°gina de login.\n\n ![imagem tela de upload](https://i.imgur.com/Gr3OQzz.png)\n\n## ‚úîÔ∏è T√©cnicas e tecnologias utilizadas\n\nAs t√©cnicas e tecnologias utilizadas pra isso s√£o:\n\n- `JavaScript`: Linguagem de programa√ß√£o principal do projeto.\n- `React`: Biblioteca JavaScript para constru√ß√£o de interfaces de usu√°rio. Utilizada para desenvolver a p√°gina de login.\n- `React-DOM`: Pacote que permite a integra√ß√£o do React com a √°rvore de elementos do DOM.\n- `Babel`: Transpilador que converte c√≥digo JavaScript moderno em vers√µes compat√≠veis com navegadores mais antigos, al√©m de permitir a interpreta√ß√£o de c√≥digos JSX.\n- `JSX`: Uma extens√£o de sintaxe para JavaScript usada no React, que permite a escrita de c√≥digo HTML/XML de forma declarativa e integrada dentro do JavaScript.\n- `Componentiza√ß√£o`: Abordagem de design em que a interface de usu√°rio √© dividida em componentes reutiliz√°veis e independentes.\n- `Props`: Dados passados de um componente pai para um componente filho no React.\n- `useState`: Hook no React que permite adicionar estado a componentes funcionais.\n- `Manipula√ß√£o de eventos`: A√ß√£o de responder a intera√ß√µes do usu√°rio, como cliques e teclas pressionadas, em aplica√ß√µes web.\n- `Eventos ass√≠ncronos`: Fun√ß√µes que aguardam uma resposta din√¢mica. Usados para conferir o tipo de arquivo que est√° sendo enviado, ler o conte√∫do do arquivo, verificar se a tag da postagem existe e \"publicar\" o arquivo. \n\n## üé® Figma\n\nVoc√™ pode conferir o Figma da aplica√ß√£o clicando [aqui](https://www.figma.com/file/SASyBm2k3IlqrO8qI1Otg1/CodeConnect-%7C-React%3A-Componentiza√ß√£o-e-conceitos-b√°sicos-(JSX)).\n\n## üõ†Ô∏è Abrir e rodar o projeto\n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/CodeConnect)\nAp√≥s baixar o projeto, voc√™ pode abrir com o Visual Studio Code. Para isso, na tela inicial da aplica√ß√£o, v√° em File / Arquivos e:\n\n- **Open Folder** (ou alguma op√ß√£o similar)\n- Procure o local onde o projeto est√° e o selecione (Caso o projeto seja baixado via zip, √© necess√°rio extra√≠-lo antes de procur√°-lo)\n- Por fim clique em OK\n\nVoc√™ pode abrir diretamente o arquivo index.html no seu navegador ou usar uma extens√£o como o ``Live Server``.\n\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luiz-felipe-esboldrim-9942a0345/)" 

    },
    {
        "id": 4,
        "titulo": "AluraBooks: biblioteca virtual",
        "texto": " # P√°gina Web de Biblioteca \n Este projeto web cont√©m uma interface de um site fict√≠cio 'AluraBooks' feito por mim durante meus estudos com foco na pr√°tica da aplica√ß√£o de responsividade. O site possui display responsivo e foi desenvolvido no m√©todo mobile-first. \n ## Confira a vers√£o completa [aqui](https://web-alurabooks-olive.vercel.app/) \n ## Vers√£o Desktop \n ![Design da tela de clientes ERP-Delphi](https://i.imgur.com/UgD5rIX.png) \n ## Menu dropdown\n ![Design da tela de clientes ERP-Delphi](https://i.imgur.com/QttepCg.png) \n ## Vers√£o Mobile \n ![Design da tela de clientes ERP-Delphi](https://i.imgur.com/OR15xTH.png) \n ### Ferramentas utilizadas:\n * HTML\n * CSS \n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/alurabooks-responsive)\n ## Feito por:\n ### LuizEsb \n### [Linkedin](https://www.linkedin.com/in/luiz-felipe-esboldrim-9942a0345/) \n\n"
    },
    {
        "id": 5,
        "titulo": "Memoteca: mural de pensamentos",
        "texto": "# Memoteca\n\nMemoteca √© um aplicativo organizador de pensamentos e frases que permite cadastrar, listar, editar e deletar pensamentos, incluindo informa√ß√µes como conte√∫do e autoria. Desenvolvi esse projeto durante meus estudos e me auxiliou a praticar implementa√ß√µes CRUD com requisi√ß√µes HTTP.\n\n![imagem banner memoteca](https://i.imgur.com/w3Jn3Hq.png)\n\n## üî® Funcionalidades do projeto\n\n`Cadastro de pensamentos`: Permite adicionar novos pensamentos √† lista, inserindo informa√ß√µes como conte√∫do e autoria.\n\n![imagem formul√°rio de cadastro de pensamento](https://i.imgur.com/1fmKwFq.png)\n\n`Listagem de pensamentos`: Exibe os pensamentos cadastrados, permitindo visualizar o texto e a autoria.\n\n`Pesquisa de pensamentos`: Barra de pesquisa typeahead que facilita a busca din√¢mica por pensamentos j√° registrados.\n\n`Favoritar pensamentos`: √â poss√≠vel favoritar os pensamentos que voc√™ mais gostou!\n\n`Edi√ß√£o de pensamentos`: Permite editar pensamentos existentes, atualizando as informa√ß√µes conforme necess√°rio.\n\n`Exclus√£o de pensamentos`: Permite remover pensamentos da lista.\n\n![imagem mural, barra de pesquisa e pensamentos](https://i.imgur.com/ZXp25k1.png)\n\n## ‚úîÔ∏è T√©cnicas e tecnologias utilizadas\n\n`JavaScript`: Linguagem de programa√ß√£o utilizada para desenvolver a l√≥gica do aplicativo.\n\n`EcmaScript 6+`: Especifica√ß√£o da linguagem de script utilizada nos m√©todos de pesquisa.\n\n`Fetch API`: Utilizada para realizar requisi√ß√µes HTTP para comunica√ß√£o com o servidor.\n\n`Axios`: Biblioteca usada para facilitar e simplificar as requisi√ß√µes HTTP.\n\n`Node.js`: Plataforma utilizada para executar o ambiente de desenvolvimento.\n\n`JSON Server`: Utilizado para simular um backend e facilitar o desenvolvimento e teste das opera√ß√µes CRUD.\n\n`CSS`: Utilizado para estiliza√ß√£o da interface do aplicativo.\n\n## üìÅ Link do Figma\n\nVoc√™ pode [acessar o figma do projeto aqui](https://www.figma.com/design/Sz1gmmemxqcB3amInL4Ndp/Rebrand-Memoteca-%7C-Curso-CRUD?node-id=148-26&t=FpdmfbiM1i1s6REQ-0).\n\n## üõ†Ô∏è Abrir e rodar o projeto\n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/Memoteca)\nPara executar a API fake, voc√™ vai precisar do NodeJS; a vers√£o utilizada foi a 22.17.0.\n\nInstale o JSON Server globalmente (se ainda n√£o estiver instalado):\n\n```bash\nnpm install -g json-server\n```\n\nPara simular o backend, abra um novo terminal e acesse a pasta backend:\n\n```bash\ncd backend\n```\n\nEnt√£o, inicie a API fake com:\n\n```bash\nnpm start\n```\n\nAcesse o backend localmente em seu navegador:\n\nhttp://localhost:3000\n\nPara executar o frontend, abra o projeto no Visual Studio Code. Com a extens√£o Live Server instalada, clique com o bot√£o direito no arquivo index.html e selecione \"Open with Live Server\" no menu de contexto.\nAcesse o frontend localmente em seu navegador:\n\nhttp://localhost:5500\n\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luiz-felipe-esboldrim-9942a0345/)"
    },
    {
        "id": 6,
        "titulo": "Fokus: timer pomodoro",
        "texto": "# Timer Pomodoro\n\n A p√°gina cont√©m timers ideais para o m√©todo de estudo Pomodoro, com 25 minutos no modo foco, 5 minutos de pausa curta e 15 minutos de pausa longa. Possui uma lista de tarefas, alertas sonoros, al√©m da op√ß√£o de ativar uma m√∫sica calma e relaxante. Desenvolvi esse projeto durante meus estudos e com ele aprendi bastante sobre manipula√ß√£o do DOM, eventos, implementa√ß√£o de √°udios, manipula√ß√£o de datas e contadores com intervalos, al√©m de praticar a estrutura√ß√£o din√¢mica e estiliza√ß√£o de p√°ginas web com HTML e CSS.\n\n## Confira a vers√£o completa [aqui](https://fokus-five-neon.vercel.app/)\n\n## Modo Foco\n\n![Design Modo Foco](https://i.imgur.com/movEBG0.png)\n\n## Descanso Curto\n\n![Design Descanso Curto](https://i.imgur.com/llY1CAx.png)\n\n## Descanso Longo\n\n![Design Descanso Longo](https://i.imgur.com/s8CAxqr.png)\n\n## Funcionalidades\n\n* Timer com Modo Foco, Descanso Curto e Descanso Longo\n\n* M√∫sica relaxante (On/Off)\n\n* Alertas sonoros que indicam que o timer foi iniciado, pausado ou que chegou ao fim\n\n* Lista de tarefas que armazena dados no LocalStorage para recuperar as tarefas, tornando a experi√™ncia do usu√°rio cont√≠nua, mesmo ap√≥s recarregar ou fechar a p√°gina\n\n* Conclus√£o autom√°tica da tarefa em andamento ap√≥s o fim do Modo Foco\n\n* Layout responsivo e conte√∫do din√¢mico, possibilita acessar de qualquer dispositivo\n\n## Timer e M√∫sica\n\n![Design Timer](https://i.imgur.com/ut0zxCI.png)\n\n## Lista de tarefas\n\n![Design Lista de Tarefas](https://i.imgur.com/jQ1mtzM.png)\n\n## Tecnologias utilizadas:\n\n* HTML\n* CSS\n* JavaScript\n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/Fokus)\n\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luizesb)" 
    },
    {
        "id": 7,
        "titulo": "VidFlow: plataforma de v√≠deos",
        "texto": "# VidFlow\n\nO VidFlow √© uma plataforma de compartilhamento de v√≠deos. Projeto desenvolvido durante meus estudos com foco na manipula√ß√£o de pacotes com Node. Interface e design previamente fornecida pela disponibilizadora do curso.\n\n![Captura de tela do Vidflow.](https://i.imgur.com/CS25zWT.png)\n\n## Confira a vers√£o completa [aqui](https://vid-flow-beta.vercel.app/)\n\n## üî® Funcionalidades do projeto\n\nAtualmente, o visual do projeto e sua funcionalidade de buscar em uma API pelas informa√ß√µes dos v√≠deos j√° est√£o prontos.\n\nDurante o desenvolvimento do projeto apliquei novas ferramentas para melhorar a qualidade do c√≥digo do projeto, como o ESLint, Prettier, Axios e o Vite.\n\nPara isso, aprendi a utilizar o **Node.js**, necess√°rio para aplicar todas essas ferramentas.\n\n## ‚úîÔ∏è T√©cnicas e tecnologias utilizadas\n\n- Node.js\n- NPM\n- Os pacotes ESLint, Prettier, JSON Server, Axios e Vite\n- Vercel\n\n## Link do Figma\n\n[Acesse o Figma do Vidflow](https://www.figma.com/file/a0crwitCtGmNIQW0RVIs5H/VidFlow-%7C-Curso-Js---Consumindo-dados-de-uma-API?node-id=0%3A1&mode=dev).\n\n## üõ†Ô∏è Abrir e rodar o projeto\n## [Reposit√≥rio do projeto](https://github.com/LuizEsb/VidFlow)\nAp√≥s baixar ou clonar o projeto deste reposit√≥rio, voc√™ precisa ter o [Node.js](https://nodejs.org/) e o [`json-server`](https://www.npmjs.com/package/json-server) instalados.\n\nCaso n√£o tenha o `json-server` instalado globalmente, execute o seguinte comando:\n\n```bash\nnpm install -g json-server@0.17.4\n```\n\nCom o Node.js e o `json-server` instalados, execute o seguinte comando para disponibilizar a API local de v√≠deos:\n\n```bash\njson-server --watch backend/videos.json\n```\n\nEm seguida, abra o `index.html` no navegador e o VidFlow j√° pode ser visualizado!\n\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luiz-felipe-esboldrim-9942a0345/)" 

    },
    {
        "id": 8,
        "titulo": "OptimusTech: website empresarial",
        "texto": "# OptimusTech\nEste projeto cont√©m um website empresarial fict√≠cio \"OptimusTech\" desenvolvido por mim. O site ainda n√£o possui responsividade pois foi desenvolvido no m√©todo desktop-first.\n\n### Confira o projeto completo [aqui](https://optimus-tech-umber-three.vercel.app/) \n\n## P√°gina Inicial\n\n![Design da tela de clientes ERP-Delphi](https://i.imgur.com/iiqhNQp.png)\n\n## Rodap√© \n\n![Design da tela de clientes ERP-Delphi](https://i.imgur.com/D55VGJV.png)\n\n### Ferramentas utilizadas:\n\n* HTML\n* CSS\n ## [Reposit√≥rio do projeto](https://github.com/LuizEsb/optimus-tech)\n## Feito por:\n\n### LuizEsb\n\n### [Linkedin](https://www.linkedin.com/in/luiz-felipe-esboldrim-9942a0345/)"
    }
]